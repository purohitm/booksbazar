extends ../layout

block content
    div.container
        // Book Details Section
        div.book-details-section
            div.row.g-4
                // Book Cover and Actions
                div.col-md-4
                    div.book-cover-section
                        div.position-relative
                            img.img-fluid(src=book.coverImage || '/images/default-book.png' alt=book.title || 'Unknown Book' width='300' height='450' style='object-fit: cover; border-radius: 10px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1)')
                            if book.coverImage && book.coverImage !== '/images/default-book.png'
                                div.position-absolute.top-0.start-0.p-2
                                    span.badge.bg-success.text-white.px-3.py-1.rounded-pill Custom Cover
                        // Book Actions
                        div.book-actions-section.mt-4
                            div.d-flex.flex-column.gap-2
                                // Debug information - remove this after testing
                                div.alert.alert-info.small
                                    p Debug Info:
                                    p User logged in: #{user ? 'Yes' : 'No'}
                                    if user
                                        p User ID: #{user.id}
                                    p Book User ID: #{book.userId || 'undefined'}
                                    p User owns book: #{user && book.userId && user.id.toString() === book.userId.toString() ? 'Yes' : 'No'}
                                
                                if user && user.id
                                    if user.id === book.userId
                                        // SELLER VIEW: User owns this book - simple status display only
                                        .seller-info.mt-3
                                            .alert.alert-info.text-center
                                                i.fas.fa-user-check.me-2
                                                strong You are the seller of this book
                                                br
                                                small.text-muted Manage lock settings in your "My Books" section
                                                br
                                                a.btn.btn-sm.btn-outline-primary.mt-2(href='/profile/books') Go to My Books
                                    else
                                         // BUYER VIEW: User doesn't own the book
                                         if hasExistingChallenge && challenge
                                             // Show challenge prompt instead of Add to Cart
                                             .buyer-locked-view.mt-3.text-center
                                                 .alert.alert-warning.mb-3
                                                     i.fas.fa-lock.me-2
                                                     strong This book is locked
                                                     br
                                                     span.text-muted Answer the challenge question to get this book free.
                                                 .card.border-warning
                                                     .card-header.bg-warning.text-dark
                                                         h4.mb-0 Book Locked - Solve to Unlock!
                                                     .card-body
                                                         .alert.alert-info
                                                             h5 Literary Challenge
                                                             p.mb-0= challenge.question
                                                         form#unlockAndAddForm
                                                             .mb-3
                                                                 label.form-label(for='unlockAnswer') Your Answer:
                                                                 input.form-control#unlockAnswer(type='text' name='answer' placeholder='Enter your answer...' required)
                                                             .d-grid
                                                                 button.btn.btn-success.btn-lg#unlockAndAddBtn(type='button')
                                                                     i.fas.fa-key.me-2
                                                                     | Submit Answer
                                                             .mt-2#unlockErrorMsg.text-danger
                                                         .mt-3#unlockSuccessMsg(style='display:none;')
                                                             .alert.alert-success
                                                                 i.fas.fa-check-circle.me-2
                                                                 | Correct! Book added to your cart for free.
                                         else
                                             // Show normal purchase for unlocked book
                                             .text-center.mt-3
                                                 button.btn.btn-primary.btn-lg#addToCartBtn(type='button' data-book-id=book.id)
                                                     i.fas.fa-shopping-cart.me-2
                                                     | Add to Cart
                                else
                                    a.btn.btn-lg.btn-primary(href='/auth/login') Sign in to add
                                a.btn.btn-lg.btn-outline-primary(href='/books') Back to Browse

                // Book Information
                div.col-md-8
                    div.book-info-section
                        // Check if book has a challenge and show challenge interface
                        if challenge
                            // Phase 3: Challenge Solving Interface
                            .card.border-warning
                                .card-header.bg-warning.text-dark
                                    h4.mb-0 Book Locked - Solve to Unlock!
                                .card-body
                                    .alert.alert-info
                                        h5 Literary Challenge
                                        p.mb-0= challenge.question
                                        small.text-muted Difficulty: #{challenge.difficulty}/5 
                                    
                                    if attemptCount > 0
                                        .alert.alert-secondary
                                            small Previous attempts: #{attemptCount}
                                            if attemptCount >= 3
                                                br
                                                strong  Hint: Think about the main theme of the book
                                    
                                    form#challengeAttemptForm
                                        .mb-3
                                            label.form-label(for='challengeAttempt') Your Answer:
                                            input.form-control#challengeAttempt(type='text' placeholder='Enter your answer...' required)
                                        
                                        .d-grid
                                            button.btn.btn-success.btn-lg#submitAttemptBtn(type='button')
                                                i.fas.fa-key.me-2
                                                | Unlock Book
                                    
                                    .mt-3
                                        small.text-muted 
                                            | Need help? Try thinking about the book's main characters, themes, or memorable quotes.
                        else
                            // Normal book content (when not locked)
                            // Book Title and Author
                            div.book-header.mb-4
                                h1 #{book.title || 'Unknown Title'}
                                h4.text-muted #{book.author || 'Unknown Author'}
                                div.d-flex.align-items-center.gap-2
                                    span.text-primary #{book.price || 'Price not available'}
                                    if book.condition
                                        span.badge.bg-info #{book.condition}
                                    
                            // Book Description
                            div.book-description.mb-4
                                h5 Description
                                p #{book.description ? book.description.substring(0, 300) + '...' : 'No description available'}
                                if book.description && book.description.length > 300
                                    a(href=`/books/${book.id}` class='text-primary text-decoration-none') Read more

                            // Book Details
                            div.book-details.mb-4
                                h5 Book Details
                                ul.list-unstyled
                                    li
                                        span.text-muted Publisher:
                                        |  #{book.publisher || 'Unknown Publisher'}
                                    li
                                        span.text-muted Published:
                                        |  #{book.formattedDate || 'Unknown'}
                                    li
                                        span.text-muted Pages:
                                        |  #{book.pageCount || 'Unknown'}
                                    li
                                        span.text-muted Language:
                                        |  #{book.language || 'Unknown'}
                                    li
                                        span.text-muted Rating:
                                        |  #{book.rating || 0} (#{book.ratingCount || 0} ratings)

                            // Seller Information
                            if book.userId
                                div.seller-info.mb-4
                                    h5 Seller Information
                                    div.d-flex.align-items-center.gap-3
                                        div.avatar
                                            img.img-fluid(src=`/images/avatars/${book.sellerAvatar || 'default-avatar.png'}` alt='Seller Avatar' style='width: 50px; height: 50px; border-radius: 50%;')
                                        div
                                            h6 #{book.sellerName || 'Anonymous Seller'}
                                            p.text-muted #{book.sellerRating || 0} stars (#{book.sellerRatingCount || 0} ratings)
                                            a.btn.btn-sm.btn-outline-primary(href=`/profile/${book.userId}`) View Seller Profile

                        // Action buttons
                        .d-flex.gap-2.mb-3
                            if user && user.id
                                // Add to Cart button - Enhanced
                                button.btn.btn-primary.btn-lg#addToCartBtn(type='button')
                                    i.fas.fa-shopping-cart.me-2
                                    | Add to Cart
                                
                                // Save for Later button
                                button.btn.btn-outline-secondary#saveForLaterBtn(type='button')
                                    i.fas.fa-heart.me-2
                                    | Save for Later
                            else
                                // Guest user - show login prompt
                                a.btn.btn-primary.btn-lg(href='/login') Login to Add to Cart
                                
                        // Purchase actions section
                        .card.border-success.mb-3
                            .card-body
                                .row.align-items-center
                                    .col-md-8
                                        h5.card-title.text-success Quick Purchase
                                        p.card-text Get this book delivered to your doorstep
                                        .d-flex.align-items-center.gap-3
                                            span.h4.text-primary £#{book.price || '19.99'}
                                            if book.condition
                                                span.badge.bg-info #{book.condition}
                                    .col-md-4.text-end
                                        if user && user.id
                                            button.btn.btn-success.btn-lg#quickBuyBtn(type='button')
                                                i.fas.fa-bolt.me-2
                                                | Buy Now
                                        else
                                            a.btn.btn-success.btn-lg(href='/login') Login to Buy

        // Challenge Creation Modal (Phase 2)
        .modal.fade#challengeModal(tabindex='-1' aria-labelledby='challengeModalLabel' aria-hidden='true')
            .modal-dialog
                .modal-content
                    .modal-header
                        h5.modal-title#challengeModalLabel Create Literary Challenge
                        button.btn-close(type='button' data-bs-dismiss='modal' aria-label='Close')
                    .modal-body
                        form#challengeForm
                            .mb-3
                                label.form-label(for='challengeQuestion') 
                                    strong Question
                                    span.text-muted  (What must readers solve to unlock this book?)
                                textarea.form-control#challengeQuestion(rows='3' placeholder='e.g., "What is the main character\'s greatest fear?" or "Complete this quote: \'To be or not to be...\'"' required)
                            
                            .mb-3
                                label.form-label(for='challengeAnswer') 
                                    strong Answer
                                    span.text-muted  (Keep it simple - one word or short phrase)
                                input.form-control#challengeAnswer(type='text' placeholder='e.g., "death", "that is the question"' required)
                            
                            .mb-3
                                label.form-label(for='challengeDifficulty') 
                                    strong Difficulty Level
                                select.form-select#challengeDifficulty(required)
                                    option(value='') Choose difficulty...
                                    option(value='1') Easy (Anyone can solve)
                                    option(value='2') Simple (Basic knowledge needed)
                                    option(value='3') Medium (Some thinking required)
                                    option(value='4') Hard (Deep knowledge needed)
                                    option(value='5') Expert (Only true fans can solve)
                            
                            .alert.alert-info.small
                                strong Tips:
                                ul.mb-0
                                    li Keep answers simple and clear
                                    li Avoid trick questions
                                    li Think about what makes this book special
                    
                    .modal-footer
                        button.btn.btn-secondary(type='button' data-bs-dismiss='modal') Cancel
                        button.btn.btn-primary#createChallengeBtn(type='button') 
                            i.fas.fa-lock.me-2
                            | Create Challenge

        // Add CSS
        style.
            :root {
                --cream: #f5f0e8;
                --muted-orange: #d4a373;
                --dusty-blue: #7895b2;
                --olive-green: #8a9a5b;
                --warm-gray: #7a7a7a;
                --shadow-light: 0 4px 6px rgba(0, 0, 0, 0.1);
                --shadow-dark: 0 8px 12px rgba(0, 0, 0, 0.15);
            }

            .book-details-section {
                padding: 2rem 0;
            }

            .book-cover-section {
                background: var(--cream);
                border-radius: 12px;
                padding: 1.5rem;
                box-shadow: var(--shadow-light);
            }

            .book-info-section {
                background: var(--cream);
                border-radius: 12px;
                padding: 2rem;
                box-shadow: var(--shadow-light);
            }

            .book-header {
                margin-bottom: 2rem;
            }

            .book-header h1 {
                font-size: 2rem;
                margin-bottom: 0.5rem;
            }

            .book-header h4 {
                color: var(--warm-gray);
                margin-bottom: 1rem;
            }

            .book-actions-section {
                background: white;
                border-radius: 8px;
                padding: 1.5rem;
                box-shadow: var(--shadow-light);
            }

            .btn {
                padding: 0.75rem 1.5rem;
                border-radius: 0.5rem;
                font-size: 1rem;
                transition: all 0.3s ease;
            }

            .btn-primary {
                background-color: var(--muted-orange);
                border-color: var(--muted-orange);
            }

            .btn-primary:hover {
                background-color: #cc7a00;
                color: white;
            }

            .btn-outline-primary {
                color: var(--muted-orange);
                border-color: var(--muted-orange);
            }

            .btn-outline-primary:hover {
                background-color: var(--muted-orange);
                color: white;
            }

            .badge.bg-info {
                background-color: var(--olive-green) !important;
                color: white !important;
                font-size: 0.875rem;
                padding: 0.375rem 0.75rem;
            }

            .badge.bg-success {
                background-color: #4caf50 !important;
            }

            .avatar img {
                object-fit: cover;
            }

            @media (max-width: 768px) {
                .book-cover-section {
                    padding: 1rem;
                }

                .book-info-section {
                    padding: 1.5rem;
                }

                .book-actions-section {
                    padding: 1rem;
                }

                .btn {
                    padding: 0.5rem 1rem;
                    font-size: 0.875rem;
                }

                .book-header h1 {
                    font-size: 1.75rem;
                }
            }

            @media (max-width: 576px) {
                .book-header h1 {
                    font-size: 1.5rem;
                }

                .book-header h4 {
                    font-size: 1rem;
                }

                .book-actions-section {
                    padding: 0.75rem;
                }

                .btn {
                    width: 100%;
                    margin-bottom: 0.5rem;
                }

                .btn:last-child {
                    margin-bottom: 0;
                }
            }

        // Pass server-side data to client-side JavaScript safely
        script.
            // Make server data available to client-side JavaScript
            window.bookData = {
                id: '#{book.id}',
                userId: #{book.userId ? `'${book.userId}'` : 'null'},
                title: '#{book.title}'
            };
            window.userData = #{user ? `{id: '${user.id}', name: '${user.name}'}` : 'null'};
            window.challengeData = #{challenge ? `{id: ${challenge.id}, question: '${challenge.question}', difficulty: ${challenge.difficulty}}` : 'null'};

        // Add JavaScript for Lock This Book functionality
        script.
            document.addEventListener('DOMContentLoaded', function() {
                const lockBtn = document.getElementById('lockBookBtn');
                const lockToggle = document.getElementById('lockToggle');
                const unlockToPurchaseBtn = document.getElementById('unlockToPurchaseBtn');
                const openLockBtn = document.getElementById('openLockBtn');
                const submitAttemptBtn = document.getElementById('submitAttemptBtn');
                
                // Refined Lock Toggle functionality
                if (lockToggle) {
                    lockToggle.addEventListener('change', function() {
                        const bookId = window.bookData.id;
                        const isLocking = lockToggle.checked;
                        
                        if (isLocking) {
                            // User wants to lock the book - show challenge creation modal
                            const challengeModal = document.getElementById('challengeModal');
                            if (challengeModal) {
                                const modal = new bootstrap.Modal(challengeModal);
                                modal.show();
                            } else {
                                showSimpleForm(bookId);
                            }
                        } else {
                            // User wants to unlock the book - remove challenge
                            if (confirm('Are you sure you want to remove the lock from this book? This will delete the challenge and make the book available for direct purchase.')) {
                                fetch(`/challenges/remove/${bookId}`, {
                                    method: 'DELETE',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    }
                                })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        location.reload();
                                    } else {
                                        alert('Error removing lock: ' + (data.error || 'Unknown error'));
                                        lockToggle.checked = true; // Revert toggle
                                    }
                                })
                                .catch(error => {
                                    console.error('Error removing lock:', error);
                                    alert('Error removing lock. Please try again.');
                                    lockToggle.checked = true; // Revert toggle
                                });
                            } else {
                                lockToggle.checked = true; // Revert toggle if user cancels
                            }
                        }
                    });
                }
                
                // Unlock to Purchase button functionality (legacy)
                if (unlockToPurchaseBtn) {
                    unlockToPurchaseBtn.addEventListener('click', function() {
                        // Show the challenge solving interface
                        const challengeInterface = document.querySelector('.card.border-warning');
                        if (challengeInterface) {
                            challengeInterface.scrollIntoView({ behavior: 'smooth' });
                            document.getElementById('challengeAttempt').focus();
                        }
                    });
                }
                
                // Open lock & answer question button functionality
                if (openLockBtn) {
                    openLockBtn.addEventListener('click', function() {
                        // Show the challenge solving interface
                        const challengeInterface = document.querySelector('.card.border-warning');
                        if (challengeInterface) {
                            challengeInterface.scrollIntoView({ behavior: 'smooth' });
                            document.getElementById('challengeAttempt').focus();
                        } else {
                            // If challenge interface is not visible, scroll to book info section
                            const bookInfoSection = document.querySelector('.book-info-section');
                            if (bookInfoSection) {
                                bookInfoSection.scrollIntoView({ behavior: 'smooth' });
                            }
                        }
                    });
                }
                
                // Phase 2: Lock This Book functionality (legacy support)
                if (lockBtn) {
                    lockBtn.addEventListener('click', function() {
                        const bookId = window.bookData.id;
                        console.log('Lock button clicked for book:', bookId);
                        
                        // For debugging - let's first make sure the modal shows
                        try {
                            const challengeModal = document.getElementById('challengeModal');
                            if (challengeModal) {
                                console.log('Modal found, trying to show...');
                                // Use Bootstrap 5 syntax
                                const modal = new bootstrap.Modal(challengeModal);
                                modal.show();
                                console.log('Modal should be visible now');
                            } else {
                                console.error('Modal not found in DOM');
                                // Fallback to simple form for now
                                showSimpleForm(bookId);
                            }
                        } catch (error) {
                            console.error('Error showing modal:', error);
                            // Fallback to simple form
                            showSimpleForm(bookId);
                        }
                    });
                }
                
                // Phase 3: Challenge solving functionality
                if (submitAttemptBtn) {
                    submitAttemptBtn.addEventListener('click', function() {
                        const challengeId = window.challengeData.id;
                        const answer = document.getElementById('challengeAttempt').value.trim();
                        
                        if (!answer) {
                            alert('Please enter an answer');
                            return;
                        }
                        
                        // Disable button to prevent multiple submissions
                        submitAttemptBtn.disabled = true;
                        submitAttemptBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Checking...';
                        
                        // Submit answer
                        fetch(`/challenges/${challengeId}/attempt`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                answer: answer
                            })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Correct answer!
                                alert(` Correct! You earned ${data.points} points! Book unlocked!`);
                                location.reload(); // Reload to show unlocked book
                            } else {
                                // Wrong answer
                                let message = ` ${data.message}`;
                                if (data.attemptNumber) {
                                    message += `\nAttempt ${data.attemptNumber}/∞`;
                                }
                                if (data.showHint && data.hint) {
                                    message += `\n\n Hint: ${data.hint}`;
                                }
                                alert(message);
                                
                                // Clear the input for next attempt
                                document.getElementById('challengeAttempt').value = '';
                                
                                // Show hint in UI if available
                                if (data.showHint) {
                                    const hintDiv = document.createElement('div');
                                    hintDiv.className = 'alert alert-warning mt-2';
                                    hintDiv.innerHTML = `<strong> Hint:</strong> ${data.hint || 'Think about the main theme of the book'}`;
                                    document.getElementById('challengeAttemptForm').appendChild(hintDiv);
                                }
                            }
                        })
                        .catch(error => {
                            console.error('Error submitting answer:', error);
                            alert('Error submitting answer. Please try again.');
                        })
                        .finally(() => {
                            // Re-enable button
                            submitAttemptBtn.disabled = false;
                            submitAttemptBtn.innerHTML = '<i class="fas fa-key me-2"></i>Unlock Book';
                        });
                    });
                    
                    // Allow Enter key to submit
                    document.getElementById('challengeAttempt').addEventListener('keypress', function(e) {
                        if (e.key === 'Enter') {
                            e.preventDefault();
                            submitAttemptBtn.click();
                        }
                    });
                }
                
                // Add to Cart functionality
                const addToCartBtn = document.getElementById('addToCartBtn');
                if (addToCartBtn) {
                    addToCartBtn.addEventListener('click', function() {
                        const bookId = window.bookData.id;
                        
                        // Disable button to prevent multiple clicks
                        addToCartBtn.disabled = true;
                        addToCartBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Adding...';
                        
                        // Add to cart
                        fetch('/cart/add', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                bookId: bookId,
                                quantity: 1
                            })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Navigate directly to cart page (no alert)
                                window.location.href = '/cart';
                            } else {
                                alert('Error: ' + (data.error || 'Failed to add to cart'));
                            }
                        })
                        .catch(error => {
                            console.error('Error adding to cart:', error);
                            alert('Error adding to cart. Please try again.');
                        })
                        .finally(() => {
                            // Re-enable button
                            addToCartBtn.disabled = false;
                            addToCartBtn.innerHTML = '<i class="fas fa-shopping-cart me-2"></i>Add to Cart';
                        });
                    });
                }
                
                // Simple fallback form function (Phase 2)
                function showSimpleForm(bookId) {
                    const question = prompt('Enter your challenge question:');
                    if (!question) return;
                    
                    const answer = prompt('Enter the answer:');
                    if (!answer) return;
                    
                    const difficulty = prompt('Enter difficulty (1-5):');
                    if (!difficulty) return;
                    
                    // Create challenge
                    fetch('/challenges/create', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            bookId: bookId,
                            question: question,
                            answer: answer,
                            difficulty: parseInt(difficulty)
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.error) {
                            alert('Error: ' + data.error);
                        } else {
                            alert('Challenge created successfully! ');
                            location.reload();
                        }
                    })
                    .catch(error => {
                        console.error('Error creating challenge:', error);
                        alert('Error creating challenge. Please try again.');
                    });
                }
                
                // Handle modal form submission (Phase 2)
                const createChallengeBtn = document.getElementById('createChallengeBtn');
                if (createChallengeBtn) {
                    createChallengeBtn.addEventListener('click', function() {
                        const bookId = window.bookData.id;
                        const question = document.getElementById('challengeQuestion').value;
                        const answer = document.getElementById('challengeAnswer').value;
                        const difficulty = document.getElementById('challengeDifficulty').value;
                        
                        console.log('Form data:', { bookId, question, answer, difficulty });
                        
                        // Validate form
                        if (!question || !answer || !difficulty) {
                            alert('Please fill in all fields');
                            return;
                        }
                        
                        // Create challenge
                        fetch('/challenges/create', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                bookId: bookId,
                                question: question,
                                answer: answer,
                                difficulty: parseInt(difficulty)
                            })
                        })
                        .then(response => response.json())
                        .then(data => {
                            console.log('Response:', data);
                            if (data.error) {
                                alert('Error: ' + data.error);
                            } else {
                                alert('Challenge created successfully! ');
                                const modal = bootstrap.Modal.getInstance(document.getElementById('challengeModal'));
                                if (modal) modal.hide();
                                location.reload();
                            }
                        })
                        .catch(error => {
                            console.error('Error creating challenge:', error);
                            alert('Error creating challenge. Please try again.');
                        });
                    });
                }

                // New functionality for buyer locked book
                const unlockAndAddBtn = document.getElementById('unlockAndAddBtn');
                const unlockAnswerInput = document.getElementById('unlockAnswer');
                const unlockErrorMsg = document.getElementById('unlockErrorMsg');
                const unlockSuccessMsg = document.getElementById('unlockSuccessMsg');

                if (unlockAndAddBtn && unlockAnswerInput && unlockErrorMsg && unlockSuccessMsg) {
                    unlockAndAddBtn.addEventListener('click', function() {
                        const answer = unlockAnswerInput.value.trim();
                        if (!answer) {
                            unlockErrorMsg.textContent = 'Answer cannot be empty!';
                            unlockErrorMsg.style.display = 'block';
                            return;
                        }

                        unlockErrorMsg.textContent = ''; // Clear previous errors
                        unlockErrorMsg.style.display = 'none';
                        unlockSuccessMsg.style.display = 'none';

                        unlockAndAddBtn.disabled = true;
                        unlockAndAddBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Submitting...';

                        fetch(`/challenges/${window.challengeData.id}/attempt`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                answer: answer
                            })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                unlockSuccessMsg.style.display = 'block';
                                unlockSuccessMsg.textContent = `Correct! Book added to your cart for free.`;
                                // Optionally, redirect to cart or update UI
                                setTimeout(() => {
                                    window.location.href = '/cart';
                                }, 2000); // Redirect after 2 seconds
                            } else {
                                let message = ` ${data.message}`;
                                if (data.attemptNumber) {
                                    message += `\nAttempt ${data.attemptNumber}/∞`;
                                }
                                if (data.showHint && data.hint) {
                                    message += `\n\n Hint: ${data.hint}`;
                                }
                                unlockErrorMsg.textContent = message;
                                unlockErrorMsg.style.display = 'block';
                            }
                        })
                        .catch(error => {
                            console.error('Error submitting answer for unlock:', error);
                            unlockErrorMsg.textContent = 'Error submitting answer. Please try again.';
                            unlockErrorMsg.style.display = 'block';
                        })
                        .finally(() => {
                            unlockAndAddBtn.disabled = false;
                            unlockAndAddBtn.innerHTML = '<i class="fas fa-key me-2"></i>Submit Answer';
                        });
                    });
                }
            });
