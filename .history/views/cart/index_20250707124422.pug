extends ../layout

block content
    div.container
        div.row
            div.col-12
                h1.mb-4 Your Shopping Cart
                
                if cartItems && cartItems.length === 0
                    div.text-center.p-5
                        i.fas.fa-shopping-cart.display-1.text-muted.mb-3
                        h4.text-muted Your cart is empty
                        p.text-muted Add some items to your cart to get started
                        a.btn.btn-primary(href='/books') Continue Shopping
                else if cartItems && cartItems.length > 0
                    div.table-responsive
                        table.table.table-hover
                            thead
                                tr
                                    th Product
                                    th Price
                                    th Quantity
                                    th Subtotal
                                    th Actions
                            tbody
                                each item in cartItems
                                    tr(data-item-id=item.id)
                                        td
                                            div.d-flex.align-items-center
                                                img(src=`${item.book.coverImage}` alt=`${item.book.title}` style='width: 80px; height: 120px; object-fit: cover; margin-right: 1rem;')
                                                div
                                                    h6.mb-0 #{item.book.title}
                                                    small.text-muted #{item.book.author}
                                        td.text-end #{item.book.price}
                                        td
                                            form(method='POST' action=`/cart/${item.id}/update` class='d-inline')
                                                input.form-control.form-control-sm(type='number' name='quantity' value=item.quantity min='1' style='width: 80px;')
                                        td.text-end #{(item.book.price * item.quantity).toFixed(2)}
                                        td
                                            button.btn.btn-sm.btn-danger.remove-item(type='button' data-item-id=item.id)
                                                i.fas.fa-trash
                        
                    div.d-flex.justify-content-between.align-items-center.mt-4
                        div
                            h5 Total: #{total.toFixed(2)}
                        div
                            a.btn.btn-primary.me-2(href='/books') Continue Shopping
                            button.btn.btn-success(type='button' onclick='checkout()') Proceed to Checkout

                    // Checkout Modal
                    div.modal.fade(id='checkoutModal' tabindex='-1')
                        div.modal-dialog
                            div.modal-content
                                div.modal-header
                                    h5.modal-title Checkout
                                    button.close(type='button' data-bs-dismiss='modal')
                                        span(aria-hidden='true') Ã—
                                div.modal-body
                                    form(id='checkoutForm')
                                        .form-group.mb-3
                                            label(for='address') Delivery Address
                                            textarea.form-control(id='address' name='address' rows='3' required)
                                        .form-group.mb-3
                                            label(for='phone') Phone Number
                                            input.form-control(type='tel' id='phone' name='phone' required)
                                        .form-group.mb-3
                                            label(for='paymentMethod') Payment Method
                                            select.form-control(id='paymentMethod' name='paymentMethod' required)
                                                option(value='') Select Payment Method
                                                option(value='cash') Cash on Delivery
                                                option(value='card') Credit/Debit Card
                                                option(value='bank') Bank Transfer
                                div.modal-footer
                                    button.btn.btn-secondary(type='button' data-bs-dismiss='modal') Close
                                    button.btn.btn-primary(type='submit' form='checkoutForm') Place Order

    // Add styles
    style.
        .cart-item-image {
            width: 80px;
            height: 120px;
            object-fit: cover;
        }
        
        .cart-item-info {
            margin-left: 1rem;
        }
        
        .cart-item-actions {
            display: flex;
            gap: 0.5rem;
        }
        
        .cart-total {
            font-size: 1.25rem;
            font-weight: bold;
        }
        
        /* Toast styles */
        .toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: #fff;
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            z-index: 1000;
            animation: slideIn 0.3s ease-out;
            display: flex;
            align-items: center;
            gap: 1rem;
            max-width: 400px;
        }
        
        .toast.success {
            background: #e8f5e9;
            color: #1b5e20;
        }
        
        .toast.error {
            background: #f44336;
            color: #fff;
        }
        
        .toast .toast-icon {
            font-size: 1.5rem;
        }
        
        .toast .toast-message {
            flex-grow: 1;
        }
        
        .toast .toast-actions {
            display: flex;
            gap: 0.5rem;
        }
        
        .toast .undo-btn {
            background: transparent;
            border: none;
            color: inherit;
            padding: 0.5rem 1rem;
            cursor: pointer;
        }
        
        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

    // Add JavaScript
    script.
        // Initialize Bootstrap modal
        const checkoutModal = new bootstrap.Modal(document.getElementById('checkoutModal'));

        // Function to show toast notification
        function showToast(message, type = 'success', undoCallback = null) {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            
            const toastContent = `
                <div class="toast-icon">
                    <i class="fas fa-check-circle"></i>
                </div>
                <div class="toast-message">
                    ${message}
                </div>
                ${undoCallback ? `
                    <div class="toast-actions">
                        <button class="undo-btn" onclick="${undoCallback}">Undo</button>
                    </div>
                ` : ''}
            `;
            
            toast.innerHTML = toastContent;
            document.body.appendChild(toast);
            
            // Remove toast after 3 seconds if no undo callback
            if (!undoCallback) {
                setTimeout(() => {
                    toast.remove();
                }, 3000);
            }
        }

        // Handle item removal
        document.querySelectorAll('.remove-item').forEach(button => {
            button.addEventListener('click', async (e) => {
                const itemId = button.getAttribute('data-item-id');
                const itemRow = button.closest('tr');
                
                try {
                    const response = await fetch(`/cart/${itemId}/remove`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        
                        // Remove item from DOM with animation
                        itemRow.style.opacity = '0';
                        itemRow.style.transform = 'scale(0.95)';
                        setTimeout(() => {
                            itemRow.remove();
                        }, 300);
                        
                        // Update cart total
                        const totalElement = document.querySelector('.cart-total');
                        if (totalElement) {
                            totalElement.textContent = data.total.toFixed(2);
                        }
                        
                        // Show success toast
                        showToast(`"${data.removedItem.book.title}" removed from cart`, 'success');
                        
                        // If cart is empty, show empty message
                        if (data.cartItems.length === 0) {
                            const emptyMessage = `
                                <div class="text-center p-5">
                                    <i class="fas fa-shopping-cart display-1 text-muted mb-3"></i>
                                    <h4 class="text-muted">Your cart is empty</h4>
                                    <p class="text-muted">Add some items to your cart to get started</p>
                                    <a class="btn btn-primary" href="/books">Continue Shopping</a>
                                </div>
                            `;
                            document.querySelector('.table-responsive').innerHTML = emptyMessage;
                        }
                    } else {
                        const error = await response.json();
                        showToast(error.message || 'Failed to remove item', 'error');
                    }
                } catch (error) {
                    console.error('Error removing item:', error);
                    showToast('An error occurred. Please try again.', 'error');
                }
            });
        });

        // Checkout function
        function checkout() {
            checkoutModal.show();
        }

        // Checkout form submission
        document.getElementById('checkoutForm')?.addEventListener('submit', async (e) => {
            e.preventDefault();
            const form = e.target;
            try {
                const response = await fetch('/cart/checkout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        address: form.address.value,
                        phone: form.phone.value,
                        paymentMethod: form.paymentMethod.value
                    })
                });
                
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        showToast('Order placed successfully!', 'success');
                        setTimeout(() => {
                            window.location.href = '/orders';
                        }, 2000);
                    } else {
                        showToast(data.message || 'Failed to place order', 'error');
                    }
                } else {
                    showToast('Failed to place order. Please try again.', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('An error occurred. Please try again.', 'error');
            }
        });
